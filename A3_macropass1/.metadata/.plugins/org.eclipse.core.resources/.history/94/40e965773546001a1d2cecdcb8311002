package macropassone;

import java.io.*;
import java.util.ArrayList;
import java.util.*;


public class PassOne {
	ArrayList<MNTEntry>MNT;
	ArrayList<String>PNTAB;
	HashMap<String,String>KPDTAB;
	
	public PassOne(){
		MNT    = new ArrayList<MNTEntry>();
		PNTAB  = new ArrayList<String>();
		KPDTAB = new HashMap<String,String>();
	}
	
	
	public MacroOutput getOutPut(BufferedReader reader) throws IOException{
		String line;
		int kpdtp=0;
		int mdtp =0;
		
		while((line = reader.readLine())!=null){
			String parts[] = line.split("\\s+");
			
			if(parts[0].contains("MACRO")){
				PNTAB.clear();
				//handling initial statements
				//line = reader.readLine();
				String prototype[] = reader.readLine().split("\\s+|,\\s+");
				MNTEntry entry = new MNTEntry(prototype[0],mdtp,kpdtp);
				
				//counting no of parameters
				for(int i=1;i<prototype.length;i++){
					//keywordParameters;
					if(prototype[i].contains("=")){
						kpdtp++;
						entry.incrKP();
						String keywordParts[] = prototype[i].replace("&","").split("=");
						KPDTAB.put(keywordParts[0],((keywordParts.length==2) ? keywordParts[1]:"-"));
						PNTAB.add(keywordParts[0]);
					}
					//positionalParameters
					else{
						entry.incrPP();
						PNTAB.add(prototype[i].replace("&",""));
					}
				}
				MNT.add(entry);				
			}
		}
		MacroOutput macroOutput = new MacroOutput();
		
		
		//for MNT
		final StringBuilder mnt = new StringBuilder(); 
		for(MNTEntry values : MNT){
		  mnt.append(values).append("\n");
		}
		macroOutput.setMNT(mnt.toString());
		
		//for KPDTAB
		final StringBuilder kpdtab = new StringBuilder();
		   for (Map.Entry<String, String> pair: KPDTAB.entrySet()) {
	         String tempkey = pair.getKey();
	         String tempvalue = pair.getValue();
	         kpdtab.append(tempkey).append("\t").append(tempvalue).append("\n");
		   }
		macroOutput.setKPDTAB(kpdtab.toString());
		
		//for PNTAB
		  final StringBuilder pntab = new StringBuilder();	
		  for (String values : PNTAB) {
	            pntab.append(values).append("\n");
	        }
		macroOutput.setPNTAB(pntab.toString());
		
		
		return macroOutput;
	}
}